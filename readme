Общая информация

Хурма является онлайн-школой и предоставляет программный продукт, который направлен на организацию работы онлайн-школы. Этот продукт включает в себя веб-приложение, которое выполняет несколько задач.

В частности, предоставляется пользовательский интерфейс для ученика, который позволяет регистрироваться в приложении, добавлять и редактировать свои личные данные, выбирать подходящий для него курс занятий, просматривать текущие и завершённые курсы и полученные дипломы, а также свой прогресс в текущих курсах.

Данный программный продукт будет реализован на языке Java с использованием общих библиотек и модулей. Это значит, что проект будет иметь высокое качество кодирования, а также максимально возможную эффективность и производительность работы приложения.

График встреч

Дата встречи	Тема и вопросы встречи
18.03	Обсуждение технических деталей (Выбор технологий для разработки, способ создания и организации базы данных, а также способ моделирования классов, которые будут использоваться в этой базе данных для хранения, упорядочивания и обработки данных)
25.03	Систематизация документов и материалов для совместной работы членов команды. Назначение задач каждому члену команды, чтобы начать работу над проектом. Были установлены стандарты и правила, которые необходимо соблюдать для написания кода, а также определены процессы, которые будут использоваться для создания и управления проектом.
01.04	Обсуждение проведенной работы. Изменение диаграмм классов, планирование подключения базы данных к серверу.
08.04	Обсуждение проведенной работы. Обсуждение базы данных, схемы таблиц и взаимосвязей между ними. 
15.04	Обсуждение проведенной работы. Обсуждение подключения модуля Spring Security к базе данных.
22.04	Обсуждение проведенной работы. Завершение разработки базы данных. Заполнение ее тестовыми данными. Проверка работоспособности функций входа в аккаунт по данным из базы данных. Обсуждение реализации редактирования личных данных.
20.04	Дополнительная встреча. Заполнение таблицы с пользователями тестовыми данными. Реализация авторизации по данным из таблицы.
29.04	Обсуждение проведенной работы. Добавление возможности записаться на курс. Проверка работоспособности на тестовых данных. Обсуждение реализации функции создания аккаунта.
04.05	Дополнительная встреча. Обсуждение способов реализации создания учетной записи.
06.05	Обсуждение и ликвидация ошибок, ручное тестирование
13.05	Обсуждение плана показа работ заказчику.


Участники команды и их роли в проекте

Азизова Виктория: разработчик баз данных (отвечает за управление и обновление данных, а также за разработку приложений и программного обеспечения, которые используют эти данные), веб-разработчик.
Осипов Вилен: бэкенд-разработчик (занимается созданием и поддержкой серверной части веб-приложения. Он отвечает за реализацию логики работы системы, безопасность, хранение, обработку и передачу данных.)


У каждого члена команды есть индивидуальный список задач.
Перед тем, как каждый член команды вносит изменения в свой список задач, необходимо обсудить это с остальными участниками команды. Каждый член команды имеет право на редактирование своего списка, но решение принимается коллективно.
После выполнения задачи мы докладываем о нашем прогрессе в общей беседе, чтобы каждый видел прогресс всех членов команды.

Задачи членов команды

Азизова Виктория:

1.	Создать макет базы данных в виде ER-диаграммы.
2.	Создать базу данных и таблицы в ней.
3.	Изучить подключение базы данных MySQL к программе на Java.
4.	Заполнить таблицу пользователей тестовыми данными.
5.	Реализовать отображение личных данных текущего пользователя (клиентская часть, запрос для базы данных).
6.	Возможность редактирования личных данных текущего пользователя в базе данных (клиентская часть, запрос для базы данных).
7.	Реализовать регистрацию пользователей (клиентская часть, запрос для базы данных).
8.	Заполнить таблицы Курсов и Занятий тестовыми данными.

Осипов Вилен:

1.	Просмотреть список функциональных требований, предоставленный заказчиком, и обсудить изменения, если необходимо.
2.	Внедрить модуль Spring Security для защиты выбранных страниц сайта через логин и пароль пользователей.
3.	Реализовать авторизацию пользователей по их данным из базы данных.
4.	Реализовать отображение личных данных текущего пользователя (серверная часть).
5.	Возможность редактирования личных данных текущего пользователя в базе данных (серверная часть).
6.	Реализовать регистрацию пользователей (серверная часть).

База знаний: 

База данных MySQL содержит в себе 4 таблицы. Первичные ключи выделены жирным.

1.	users - содержит информацию о пользователях приложения.
Столбцы:
•	id - номер пользователя
•	email - электронная почта пользователя
•	password - пароль пользователя
•	firstName - имя пользователя
•	lastName - фамилия пользователя
•	info - дополнительная информация (опционально)
•	status - поле для информации об активности аккаунта 
•	role - поле для разделения пользователей на студентов, преподавателей и администраторов
2.	courses - содержит в себе информацию о курсах.
Столбцы:
•	courseid - номер курса
•	name - название курса 
•	cost - цена 
3.	classes - содержит в себе информацию о классах.
 Столбцы:
•	classid - номер класса
•	courseid - номер курса
•	numberInCourse - номер задания по порядку в курсе
•	topic - тема задания 
•	materialLink - ссылка на теоретический материал
•	homeworkLink - ссылка на домашнее задание
4.	connector - содержит в себе информацию о пользователях, курсах, на которые они записались, а также о последних выполненных заданиях. 
Столбцы:
•	primkey - идентификатор записи
•	userid - идентификатор пользователя
•	courseid - идентификатор курса
•	lastFinishedTask- последнее выполненное задание в курсе


Запросы

Авторизация
Route: “/login”
Данные front->server:
	email - электронная почта пользователя (используется как login)
password - пароль пользователя
Данные server->front:
	userFound - информация о том, найден ли пользователь
status - статус пользователя
id - id пользователя

Доступные курсы
Route: “/home”
Данные front->server:
	-
Данные server->front:
courseid - номер курса
name - название курса 
cost - цена 


Добавление пользователя 

Route: “/signUp”
Данные front->server:
email - электронная почта пользователя
password - пароль пользователя
firstName - имя пользователя
lastName - фамилия пользователя
info - дополнительная информация (опционально)

Данные server->front:
-

Все курсы пользователя 

Route: “/hello”
Данные front->server:
email - электронная почта пользователя

Данные server->front:
courseid - идентификатор курса
lastFinishedTask- последнее выполненное задание в курсе


Следующее задание в курсе

Route: “/hello”
Данные front->server:
	courseid - идентификатор курса
lastFinishedTask- последнее выполненное задание в курсе

Данные server->front:
topic - тема задания 
materialLink - ссылка на теоретический материал
homeworkLink - ссылка на домашнее задание

	
Проверка, начал ли пользователь курс

Route: “/home ”
Данные front->server:
id - номер пользователя
Данные server->front:
courseid - идентификатор курса

Выбор курса

Route: “/home”
Данные front->server:
id - номер пользователя
courseid - идентификатор курса

Данные server->front:
	-



Правила написания кода:

1. Не используйте подчеркивание для отделения слов внутри идентификаторов.
2. Названия методов и переменных должны отражать их смысл, но быть краткими. Если используется непрозрачное (неясное) название переменной или метода, то в комментарии необходимо прописать его назначение.
3. Не используйте для переменных и/или методов названия, которые отличаются только регистром.
4. При назывании переменных используйте стиль Кеме (первая буква -- строчная, каждая следующее слово начинается с большой буквы). Для методов и классов использовать стиль Паскаль (все новые слова, включая первое, начинаются с большой буквы). 
5. Не используйте транслитерацию - используйте английские слова. Например, клавиатура, курс, оценка/отметки, но хурма. 
6. Избежать использования префиксов в названиях. 
7. Для базового класса, который не предназначен для прямого использования, используйте постфикс База. 
8. Для интерфейсов используйте префикс I. 
9. На одной строке должна быть только одна логическая строка кода (одна инструкция). 
10. Количество пустых строк: между методами: 1 между классами, интерфейсами: 2 
11. Неправильное комментирование: { ... Действие; //Комментарий к действию ... } Неправильное комментирование: { ... //Ооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооо Действие; ... } 
Правильное комментирование: { ... //Комментарий к действию Действие; ... } 
Правильное комментирование: { ... //Ооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооо //длинный комментарий к действию Действие; ... }

Правила командной работы:

1. Общение между участниками команды происходит через Telegram.
2. Перед разработкой любого компонента проекта проводится его обсуждение со всеми членами команды и постановка задачи.
3. После выполнения задачи необходимо сообщить об этом остальным членам команды.
4. Встречи проводятся регулярно для возможности следить за прогрессом и синхронизировать работу. Дополнительные встречи могут проводиться по инициативе любого из членов команды при возникновении проблем и неспособности найти решение самостоятельно.
5. Название коммита должно кратко и ясно описывать сделанные изменения.
